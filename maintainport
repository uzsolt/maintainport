#!/bin/sh

readonly yellow="\033[1;33m"
readonly white="\033[1;37m"
readonly end="\033[0m"
readonly green="\033[0;32m"
readonly bred="\033[1;31m"

readonly STR_MISSED_POUDRIERE="You don't have poudriere. Please install!"
readonly STR_MISSED_COLORDIFF="You don't have colordiff. If you want to use please install it!"
readonly STR_MISSED_PORTCLIPPY="You dont'have portlint. Please install!"
readonly STR_MISSED_PORTFMT="You dont'have portfmt. Please install!"
readonly STR_MISSED_PORTLINT="You dont'have portlint. Please install!"
readonly STR_BAD_CATPORT_STYLE="'%s' isn't category/portname-style."
readonly STR_PORT_NOTEXIST="'%s' does not exist in '%s'."
readonly STR_LOGFILE_NOTEXIST="Logfile '%s' does not exist."
readonly STR_COPY_DIFF="Copying diff to %s..."
readonly STR_COPY_PACKAGE="Copying package into %s..."
readonly STR_POUDRIERE_START="Running poudriere testport in jail %s"
readonly STR_POUDRIERE_FINISHED="Poudriere in jail %s finished. Exit value: %s"

PORT=""
WORKINGDIR=""

printMessage() {
  MSG="${1}"
  shift
  printf "${yellow} >>${white} ${MSG} ${end}\n" "$@"
}

askQuestion() {
  printf "%s$*${end}\n" "${green}" >&2
  read -r X
  echo "$X"
}

waitForEnter() {
  MSG="Please press ENTER."
  printMessage "${MSG}"
  read -r X
}

printError() {
  first=$1
  shift
  printf "${bred}!! ${first}${end}\n" "$@" >&2
}

init() {
  CONF=~/.maintainport.conf
  readConfigFile
  setEnvironmentVariables
  checkProgramsPresent
}

readConfigFile() {
  [ -f ${CONF} -a -r ${CONF} ] && . ${CONF}
}

setEnvironmentVariables() {
  EDITOR=${EDITOR:-vi}
  SHELL=${SHELL:-/bin/tcsh}
  PAGER=${PAGER:-"less -R"}

  VCS="${VCS:-git}"
  VCS_STATUS="${VCS_STATUS:-status}"
  VCS_DIFF="${VCS_DIFF:-diff}"
  VCS_REVERT="${VCS_REVERT:-checkout}"

  P_PORTSDIR=${P_PORTSDIR:-/usr/local/poudriere/ports/}
  P_PORT=${P_PORT:-default}
  P_LOGDIR=${P_LOGDIR:-/usr/local/poudriere/data/logs/bulk/}
  P_PACKDIR=${P_PACKDIR:-/usr/local/poudriere/data/packages/}

  WWW_DIFFDIR=${WWW_DIFFDIR:-/usr/local/www/freebsd/diff/}
  WWW_TESTPACKAGEDIR=${WWW_TESTPACKAGEDIR:-/usr/local/www/freebsd/test_pkg/}

  PACK_SUFFIX=${PACK_SUFFIX:-.txz}
}

checkProgramsPresent() {
  if checkPoudrierePresent; then
    POUDRIERE=poudriere
  else
    POUDRIERE=""
    printError "${STR_MISSED_POUDRIERE}"
  fi

  if checkColordiffPresent; then
    COLORDIFF="colordiff"
  else
    COLORDIFF="cat"
    printMessage "${STR_MISSED_COLORDIFF}"
  fi

  if checkPortlintPresent; then
    PORTLINT=portlint
  else
    PORTLINT=""
    printError "${STR_MISSED_PORTLINT}"
  fi

  if checkPortclippyPresent; then
     PORTCLIPPY=portclippy
  else
     PORTCLIPPY=""
     printError "${STR_MISSED_PORTCLIPPY}"
  fi

  if checkPortfmtPresent; then
     PORTFMT=portfmt
  else
     PORTFMT=""
     printError "${STR_MISSED_PORTFMT}"
  fi
}

checkProgramExists() {
  which -s "$1"
}

checkPoudrierePresent() {
  checkProgramExists poudriere
}

checkColordiffPresent() {
  checkProgramExists colordiff
}

checkPortlintPresent() {
  checkProgramExists portlint
}

checkPortclippyPresent() {
  checkProgramExists portclippy
}

checkPortfmtPresent() {
  checkProgramExists portfmt
}

checkPortValid() {
  if checkPortIncorrectStyle; then
    printError "${STR_BAD_CATPORT_STYLE}" "${PORT}"
    exit 1
  fi
  WORKINGDIR=${P_PORTSDIR}/${P_PORT}/${PORT}
  if checkPortDirectoryNotExists; then
    printError "${STR_PORT_NOTEXIST}" "${PORT}" "${P_PORTSDIR}/${P_PORT}"
    exit 1
  fi
}

checkPortIncorrectStyle() {
  echo "${PORT}" | grep -qvx "[[:alnum:]-]\+/[[:alnum:]-]\+"
}

checkPortDirectoryNotExists() {
  [ ! -d "${WORKINGDIR}" ]
}

parseCommandlineParams() {
  PORT=$1
}

get_poudriere_jails() {
  ${POUDRIERE} jail -ln | sed 1d
}

get_pkgname() {
  make -VPKGNAME -C "${WORKINGDIR}" "$@"
}

get_pkgname_flavor() {
  if [ -n "${FLAVOR}" ]; then
    get_pkgname FLAVOR="${FLAVOR}"
  else
    get_pkgname
  fi
}

get_pkgplist() {
  make -VPLIST -C "${WORKINGDIR}"
}

menu_main() {
  exec 3>&1
  CHOICE=$(showMainDialog)
  if [ $? -gt 0 ]; then return 1 ; fi
  DEFAULT_ITEM=${CHOICE}
  processMainDialogChoice "${CHOICE}"
  return 0
}

showMainDialog() {
  dialog --title "${PORT}" \
  --no-cancel --default-item "${DEFAULT_ITEM}" \
  --menu "Choose an option" 20 60 17 \
    M "Edit Makefile" \
    D "Update distinfo (make makesum)" \
    L "Run linters" \
    T "Run poudriere testport" \
    I "Run poudriere testport and interactive" \
    C "Configure and run poudriere testport" \
    F "Edit pkg-plist (files)" \
    V "View diff" \
    S "Run shell" \
    P "Create testpackage" \
    R "Report" \
    X "Revert changes" \
    Q "Quit" 2>&1 1>&3
}

processMainDialogChoice() {
  CHOICE="${1}"
  case ${CHOICE} in
    M)
      editMakefile
      ;;
    D)
      updateDistinfo
      ;;
    L)
      runLinters
      ;;
    T)
      menu_poudriere
      ;;
    I)
      menu_poudriere -i
      ;;
    C)
      menu_poudriere -c
      ;;
    F)
      editPkgplist
      ;;
    V)
      viewDiff
      ;;
    S)
      cd "${WORKINGDIR}" || exit
      ${SHELL} -l
      ;;
    P)
      build_test_package
      ;;
    R)
      createReport
      ;;
    X)
      revertChanges
      exit
      ;;
    Q)
      exit
      ;;
  esac
}

changeBranch() {
  CURDIR=$(pwd)
  cd "${WORKINGDIR}" || exit
  if existsBranch ${PORT}; then
  else
    ${VCS} branch "${PORT}"
  fi
  ${VCS} checkout "${PORT}"
  ${VCS} add *
  cd "${CURDIR}" || exit
}

deleteBranch() {
  ${VCS} branch -D "${PORT}"
}

existsBranch() {
  [ "x$1" = "x" ] && exit 1
  ${VCS} branch | grep -wq "${1}"
}

editMakefile() {
  cd "${WORKINGDIR}" && ${EDITOR} Makefile
}

updateDistinfo() {
  printMessage "Updating distinfo..."
  make makesum -C "${WORKINGDIR}"
  if [ $? -gt 0 ]; then
    printError "An error occured."
    waitForEnter
  fi
}

runLinters() {
  printMessage "portlint"
  runPortlint
  printMessage "portclippy"
  ${PORTCLIPPY} ${WORKINGDIR}/Makefile
  printMessage "portfmt"
  ${PORTFMT} -D ${WORKINGDIR}/Makefile
  waitForEnter
}

runPortlint() {
  if presentPortlint; then
    (
      export PORTSDIR="${P_PORTSDIR}/${P_PORT}"
      ${PORTLINT} -abcmt "${WORKINGDIR}"
    )
  else
    printError "${STR_MISSED_PORTLINT}"
    waitForEnter
  fi
}

presentPortlint() {
  [ -n "${PORTLINT}" ]
}

viewDiff() {
  CURDIR=$(pwd)
  cd "${WORKINGDIR}" || exit
  ${VCS} add *
  ${VCS} ${VCS_DIFF} --staged --color | ${PAGER}
  cd "${CURDIR}" || exit
}

# Return values:
# JAIL variable will store the jail name
menu_choose_jail() {
  JAILS=$(get_poudriere_jails)
  JAILS_NR=$(echo "${JAILS}" | tr ' ' '\n' | cat -n)
  exec 3>&1
  CHOICE=$(dialog --title "${PORT}" --menu "Which jail?" 15 40 4 ${JAILS_NR} 2>&1 1>&3)
  result=$?
  JAIL=$(echo "${JAILS}" | tr ' ' '\n' | sed -n "${CHOICE}p")
  return ${result}
}

# Return values:
# FLAVOR variable will store the flavor
menu_choose_flavor() {
  FLAVORS=$(make -C "${P_PORTSDIR}/${P_PORT}/${PORT}" -VFLAVORS)
  if [ -z "${FLAVORS}" ]; then
    FLAVOR=""
    FLAVOR_AT=""
  else
    FLAVORS_NR=$(echo ${FLAVORS} | tr ' ' '\n' | cat -n)
    CHOICE=$(dialog --title "${PORT} flavor" \
      --menu "Which flavor?" 15 40 4 ${FLAVORS_NR} 2>&1 1>&3)
    result=$?
    FLAVOR=$(echo "${FLAVORS}" | tr ' ' '\n' | sed -n "${CHOICE}p")
    FLAVOR_AT="@${FLAVOR}"
    return ${result}
  fi
}

# Ask everything needed before run poudriere
questionsBeforePoudriere() {
  menu_choose_jail || return 1
  menu_choose_flavor || return 1
}

# Params:
# $1 - additional options to poudriere
menu_poudriere() {
  if [ -z "${POUDRIERE}" ]; then
    printError "${STR_MISSED_POUDRIERE}"
    waitForEnter
  else
    questionsBeforePoudriere
    if [ $? -gt 0 ]; then return 1; fi
    runPoudriereJailOtherOptions "${JAIL}" "$1"
  fi
}

runPoudriereJailOtherOptions() {
  printMessage "${STR_POUDRIERE_START}" "${JAIL}"
  ${POUDRIERE} testport ${2} -j "${1}" \
    -p "${P_PORT}" "${PORT}${FLAVOR_AT}"
  RET=$?
  printMessage "${STR_POUDRIERE_FINISHED}" "${JAIL}" "${RET}"
  processLogfile
}

processLogfile() {
  LOGDIR=latest/logs/
  LOGFILE=${P_LOGDIR}/${JAIL}-${P_PORT}/${LOGDIR}/$(get_pkgname_flavor).log
  if [ -r "${LOGFILE}" ]; then
    printMessage "Test results"
    showStageqaFromLogfile "${LOGFILE}"
    questionAndViewLogfile "${LOGFILE}"
    processOrphansFromLogfile "${LOGFILE}"
    processMissingsFromLogfile "${LOGFILE}"
  else
    printError "$(printf "${STR_LOGFILE_NOTEXIST}" "${LOGFILE}")"
    waitForEnter
  fi
}

showStageqaFromLogfile() {
  sed -n '/stage-qa/,/staging violations/p' "${1}"
}

questionAndViewLogfile() {
  A=$(askQuestion "Do you want to see the full logfile?")
  if [ "$A" = "y" ]; then
    ${PAGER} "${1}"
  fi
}

processOrphansFromLogfile() {
  [ -r "$1" ] || return
  if existsOrphanedInLogfile "${1}"; then
    A=$(askQuestion "Should I add orphaned files to pkg-plist (y/n)?")
    if [ "$A" = "y" ]; then
      addOrphanedfileFromLogfile "${1}"
    fi
    questionEditPkgplist
  fi
}

existsOrphanedInLogfile() {
  grep -q -m 1 "^Error: Orphaned:" "$1"
}

addOrphanedfileFromLogfile() {
  PKGPLIST="$(get_pkgplist)"
  sed -n "/^Error: Orphaned: / s,Error: Orphaned: ,,p" "$1" >> "${PKGPLIST}"
}

processMissingsFromLogfile() {
  [ -r "$1" ] || return
  if existsMissingInLogfile "${1}"; then
    A=$(askQuestion "Should I remove missing files from pkg-plist (y/n)?")
    if [ "$A" = "y" ]; then
      removeMissingsBasedOnLogfile "${1}"
    fi
    questionEditPkgplist
  fi
}

existsMissingInLogfile() {
  grep -q -m 1 "^Error: Orphaned:" "${1}"
}

removeMissingsBasedOnLogfile() {
  tmpfile=$(mktemp)
  sed -n '/^Error: Missing: / s,Error: Missing: \(.*\),\\@\1@d,p' "$1" > "${tmpfile}"
  PKGPLIST="$(get_pkgplist)"
  sed -i '' -f "${tmpfile}" "${PKGPLIST}"
  rm "${tmpfile}"
}

questionEditPkgplist() {
  A=$(askQuestion "Do you want edit pkg-plist file?")
  if [ "$A" = "y" ]; then
    editPkgplist
  fi
}

editPkgplist() {
  PKGPLIST="$(get_pkgplist)"
  ${EDITOR} "${PKGPLIST}"
}

# Params:
# $1 - which jail
build_test_package() {
  questionsBeforePoudriere || return 1
  printMessage "Build ${PORT} package in ${JAIL}"
  DATESTR="$(date +%Y%m%d-%H%M)"
  ${POUDRIERE} bulk -B "test_package/${DATESTR}" \
    -j "${JAIL}" \
    -p "${P_PORT}" "${PORT}"
  if [ $? -eq 0 ]; then
    printMessage "${STR_COPY_PACKAGE}" "${WWW_TESTPACKAGEDIR}"
    FLAVOR="$(get_pkgname_flavor)"
    cp "${P_PACKDIR}/${JAIL}-${P_PORT}/All/${FLAVOR}${PACK_SUFFIX}" \
      "${WWW_TESTPACKAGEDIR}"
  fi
  waitForEnter
}

createReport() {
  CURDIR=$(pwd)
  cd ${WORKINGDIR}
  ${VCS} commit
  printMessage "${STR_COPY_DIFF}" "${WWW_DIFFDIR}"
  PKGNAME="$(get_pkgname)"
  mkdir -p "${WWW_DIFFDIR}/${PORT}"
  diffFile="${WWW_DIFFDIR}/${PORT}/${PKGNAME}.diff"
  ${VCS} format-patch main --output=${diffFile}
  putFtpFileTargetdir "${diffFile}" "${PORT}"
  cd ${CURDIR}
  waitForEnter
}

putFtpFileTargetdir() {
  echoPutFtpFileTargetdir "$1" "$2" | lftp
}

echoPutFtpFileTargetdir() {
cat <<EOF
set ssl:verify-certificate false
open ftp://web149306_freebsd:$(cat /root/maintainport/password-freebsd)@web.adminom.hu
mkdir -p -f web/diff/${2}
put -O web/diff/${2} ${1}
EOF
}

revertChanges() {
  dialog --title "Confirmation" --yesno "Are you sure to revert ${PORT}?" 5 50
  if [ $? -eq 0 ]; then
    printMessage "Reverting ${WORKINGDIR}..."
    CURDIR=$(pwd)
    cd "${WORKINGDIR}" || exit
    ${VCS} checkout -f main
    deleteBranch
    cd "${CURDIR}" || exit
  fi
}

init
parseCommandlineParams "$@"
checkPortValid
changeBranch

DEFAULT_ITEM="M"
while menu_main; do
  true
done
